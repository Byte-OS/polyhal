searchState.loadedDescShard("polyhal", 0, "bit macro will generate the number through a shift value.\nThis is a console for debugging, If you want to use this …\nDisplay Platform Information with specified format …\nInstruction Module.\nIRQ(Interrupt requests queue) module.\nKernel Context module.\nMulti-core Module.\nPer-cpu module.\nDefiniation a constructer\nPrint macro to print polyhal information with newline\nPrint macro to print polyhal information with newline\nTimer module.\nGet The Base Address Of The PCI\nThe maximum number of IRQs.\nThe timer IRQ number.\nInit APIC\nGet the interrupt controller\nPIC End of interrupt 8259 Programmable Interrupt Controller\nPage Allocation trait for privoids that page allocation\nAllocate a physical page\nRelease a physical page\nGet the number of cpus\nInit arch with page allocator, like log crate Please …\nThe offset of the pic irq.\nCPU-related constructor, runs on all CPUs.\nContructor Types\nHAL driver constructor (e.g., interrupt controller), …\nKernel service constructor, executed only once on the …\nGeneral-purpose constructor, executed only once on the …\nCustom constructor, not executed by HAL.\nPolyHAL’s Initialize Wrapper\nPlatform-level constructor, executed only once on the …\nInit function for the primary CPU, executed only once.\nThe start symbol of the init section\nThe stop symbol of the init section\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Initialize function\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a iterator of the polyhal init section.\nThe priority of the init function\nReturns the argument unchanged.\nInit the graphics console’s information, includes frame …\nCalls <code>U::from(self)</code>.\nA wrapper of the Global Descriptor Table (GDT) with …\nKernel code segment for 32-bit mode.\nKernel code segment for 64-bit mode.\nKernel data segment.\nTSS segment.\nUser code segment for 32-bit mode.\nUser code segment for 64-bit mode.\nUser data segment.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads the GDT into the CPU (executes the <code>lgdt</code> …\nLoads the TSS into the CPU (executes the <code>ltr</code> instruction).\nConstructs a new GDT struct that filled with the default …\nReturns the GDT pointer (base and limit) that can be used …\nA wrapper of the Interrupt Descriptor Table (IDT).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads the IDT into the CPU (executes the <code>lidt</code> instruction).\nConstructs a new IDT struct that filled with entries from …\nRiscv64 ebreak instruction.\nRiscv64 ebreak instruction.\nAcknowledge the irq\nReturns the argument unchanged.\nReturns the argument unchanged.\nDisable interrupts.\nEnable interrupts.\nCheck if the interrupts was enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable irq for the given IRQ number.\nEnable irq for the given IRQ number.\nGet the irq number in this vector\nKernel Context\nKernel Context Arg Type.\nKernel Program Counter\nKernel Stack Pointer\nKernel Thread Pointer\nCreate a new blank Kernel Context.\nContext Switch\nContext Switch\nContext Switch With Page Table\nContext Switch With Page Table\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead thread pointer currently.\nAdds a memory region to the memblock.\nAllocate Memory From MEM_AREA\nGet Flattened Device Tree\nRetrieves an iterator over the registered memory areas.\nInit Device Tree Binary Pointer\nParse Information from the device tree binary or Multiboot\nAccessed Flag\nAccessed; indicates whether software has accessed the …\nCache Flag, indicating that the page will be cached\nDirty Flag, indicating that the page was written\nDirty; indicates whether software has written to the …\nDevice Flag, indicating that the page was used for device …\nGlobal Flag\nGlobal; if CR4.PGE = 1, determines whether the translation …\nMapping flags for page table.\nThis structure indicates size of the page that will be …\nPersent\nPage is present in the page table\nThe size of the page table.\nThe size of the page for this platform.\nPage-level cache disable.\nPage size; if set this entry maps a 2-MByte page; …\nPage table entry structure\nPage-level wright-through\nPage Table\nPage Table Wrapper\nReadable Flag\nRead/Write; if 0, Only read\nRead | Write | Executeable Flags\nTLB Operation set. Such as flush_vaddr, flush_all. Just …\nUser Accessable Flag\nUser | Read | Write Flags\nUser | Read | Write | Executeable Flags\nUser | Read | Executeable Flags\nUser/Supervisor; if 0, Only supervisor\nUser defined flag – ignored by hardware (bit 10)\nUser defined flag – ignored by hardware (bit 11)\nUser defined flag – ignored by hardware (bit 9)\nWriteable Flag\nExecuteable Flag\nIf IA32_EFER.NXE = 1, execute-disable If 1, instruction …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAlloc a new PageTableWrapper with new page table root This …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nflush all tlb entry\nflush the TLB entry by VirtualAddress just use it directly\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nMapping a page to specific address(kernel space address).\nMapping a page to specific virtual page (user space …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRelease the page table entry.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the root Physical Page\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTranslate a virtual adress to a physical address and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap a page from specific virtual page (user space …\nReserved for default usage. This is related to the […\nReturns the argument unchanged.\nRead the architecture-specific thread pointer register on …\nCalls <code>U::from(self)</code>.\nReturns the base address of the per-CPU data area on the …\nSet the architecture-specific thread pointer register to …\nGet current time\nGet frequency of the system clock\nGet ticks from system clock\nSet the next timer\nThe Mutex Guard.\nForce unlock the mutex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet n level page table index of the given virtual address\nGet n level page table offset of the given virtual address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")